
apply plugin: 'maven'
apply plugin: 'maven-publish'

apply from: project.rootProject.file('gradle/pom.gradle')

task emptyJar(type: Jar) {
}

def selectArtifactId(project, type, defaultName) {
    def name = project.name
    def isCommon = project.ext.has("commonStructure")
    def commonIsRoot = project.ext.has("commonStructure") && project.ext.commonStructure
    def hasNative = project.ext.has("hasNative") && project.ext.hasNative

    switch (type) {
        case 'metadata':
            if (!isCommon) return "$name-$type"
            return commonIsRoot ? "$name" : "$name-common"
            break
        case 'kotlinMultiplatform':
            if (!hasNative) return "$name-kotlinMultiplatform"
            return isCommon ? "$name-native" : "$name"
            break
        case 'jvm':
            return commonIsRoot ? "$name-jvm" : "$name"
            break
        default:
            return isCommon || hasNative ? defaultName : "$name"
            break
    }
}

def isAvailableForPublication(publication) {
    def name = publication.name
    if (name in ['maven']) return true

    def result = false
    result = result | (name in ['jvm', 'js', 'metadata', 'kotlinMultiplatform'])
    result = result | (project.ext.isLinuxHost && name == 'linuxX64')
    result = result | (project.ext.isWinHost && name == 'mingwX64')
    result = result | (project.ext.isMacosHost && name in ['iosX64', 'iosArm32', 'iosArm64', 'macosX64', 'watchosArm32', 'watchosArm64', 'watchosX86', 'tvosArm64', 'tvosX64'])

    return result
}

tasks.withType(AbstractPublishToMaven).all {
    onlyIf { isAvailableForPublication(publication) }
}

publishing {
    repositories {
        maven {
            if (publishLocal) {
                url globalM2
            } else {
                def user = 'kotlin'
                def repo = 'ktor'
                def name = 'ktor'
                url = "https://api.bintray.com/maven/$user/$repo/$name/;publish=0"
                credentials {
                    username = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
                    password = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
                }
            }
        }
        maven { name = "testLocal"; url = "$rootProject.buildDir/m2" }
    }
    publications.all {
        pom.withXml(configureMavenCentralMetadata)

        def type = it.name
        def id = selectArtifactId(project, type, it.artifactId)
        it.artifactId = id

        if (id.endsWith('native')) {
            it.artifact(emptyJar) { classifier 'javadoc' }
            it.artifact(emptyJar) { classifier 'kdoc' }
            it.artifact emptyJar
        }
    }

    if (rootProject.ext.nonDefaultProjectStructure.contains(project.name)) return

    kotlin.targets.all { target ->
        def publication = publishing.publications.findByName(target.name)

        if (publication != null) {
            if (target.platformType.name == 'jvm') {
                publication.artifact(emptyJar) {
                    classifier 'javadoc'
                }
                publication.artifact dokkaJar
            } else {
                publication.artifact(emptyJar) {
                    classifier 'javadoc'
                }
                publication.artifact(emptyJar) {
                    classifier 'kdoc'
                }
            }

            if (target.platformType.name != 'native') {
                publication.moduleDescriptorGenerator = null
            } else {
                publication.artifact emptyJar
            }
        }
    }

    // Disable gradle metadata in root jvm modules
    def hasNative = project.ext.has("hasNative") && project.ext.hasNative
    if (!hasNative) {
        def rootPublication = publishing.publications.findByName('kotlinMultiplatform')
        rootPublication.moduleDescriptorGenerator = null
    }
}

publish.dependsOn publishToMavenLocal
